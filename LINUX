#!/bin/bash

ReadableNonEmpty()
{
    if [ -r $1];
    then 
        echo "good"
    else
        echo "bad"
    fi
}

NearIdentical()
{
    local temp1=$(sed -e "s/[0-9]/x/g" $1)
    local temp2=$(sed -e "s/[0-9]/x/g" $2)

    if cmp -s "$temp1" "$temp2"; then
        printf 'same'
    else
        printf 'differ'
    fi
}

ReadableNonEmpty() $1
NearIdentical() $1 $2

input_file()
{
	if [[ ! -f $1 ]]; then
		echo "input file missing or unreadable"
		exit 1
	fi
}

number_of_lines()
{
	local count=0
	while read -r line; do
		count=$((count+1))
	done
	
	if [ ! "$count" -eq 6 ]; then
		echo "input file must have 6 lines"
		exit 2
	fi
}


seed_line()
{
    local line=$(head -n 1 $1)
    if  [[! "$line" =~ ^[0-9]+$ ]]
    then
        echo "seed line format error"
	exit 3
    fi
}

read_matrix()
{
    local i=0
    local line
    local j
    f1=" %1s"

    # Ignore the first line containing the seed number
    read line
    while read -r line; do
        j=0
        # Split on spaces
        for v in `echo $line`; do
            matrix[$i,$j]="$v"
            #printf "$f1" ${matrix[$i,$j]}
            j=$((j+1))
        done
        i=$((i+1))
        printf "\n"
    done
}

number_of_entries()
{
    if  [[! "${#matrix[@]}" -eq 25 ]] 
    then
            echo "card format error"
    exit 4
    fi
}

input_file $1 
number_of_lines $1
